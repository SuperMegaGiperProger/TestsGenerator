using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsGenerator.Generators.Services
{
    public class XUnit : Base
    {
        public readonly string[] USINGS = {"Xunit"};

        public XUnit(string sourceCodeText) : base(sourceCodeText) { }

        protected override string generateTestClass(ClassDeclarationSyntax clazz)
        {
            var namespaze = SyntaxFactory
                .NamespaceDeclaration(SyntaxFactory.ParseName(getTestNamespaceName(clazz.NamespaceName())))
                .NormalizeWhitespace();

            foreach (string uzing in USINGS)
            {
                namespaze = namespaze.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(uzing)));
            }

            var name = getTestClassName(clazz.Name());

            var classDeclaration = SyntaxFactory.ClassDeclaration(name);
            classDeclaration = classDeclaration.AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));

            foreach (MethodDeclarationSyntax method in clazz.GetPublicMethods())
            {
                MethodDeclarationSyntax methodDeclaration = generateTestMethod(getTestMethodName(method.Name()));

                classDeclaration = classDeclaration.AddMembers(methodDeclaration);
            }

            namespaze = namespaze.AddMembers(classDeclaration);

            return namespaze.NormalizeWhitespace().ToFullString();
        }

        private MethodDeclarationSyntax generateTestMethod(string name)
        {
            var testBody = SyntaxFactory.ParseStatement("Assert.True(false, \"autogenerated\");");
            
            return SyntaxFactory
                .MethodDeclaration(SyntaxFactory.ParseTypeName("void"), name)
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                .AddAttributeLists(getTestMethodAttribute())
                .WithBody(SyntaxFactory.Block(testBody));
        }

        private AttributeListSyntax getTestMethodAttribute()
        {
            return SyntaxFactory.AttributeList(
                SyntaxFactory.SingletonSeparatedList(
                    SyntaxFactory.Attribute(
                        SyntaxFactory.IdentifierName("Fact"), null
                    )
                )
            );
        }
    }
}